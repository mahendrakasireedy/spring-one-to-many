package com.example.MongoDB.SpringMongoDBApplication.serviceimpl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.MongoDB.SpringMongoDBApplication.Security.EncryptionDecryptionAES;
import com.example.MongoDB.SpringMongoDBApplication.exception.ResourceNotFoundException;
import com.example.MongoDB.SpringMongoDBApplication.model.Paganition;
import com.example.MongoDB.SpringMongoDBApplication.model.Product;
import com.example.MongoDB.SpringMongoDBApplication.repository.ProductRepository;
import com.example.MongoDB.SpringMongoDBApplication.service.ProductService;

import java.io.File;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.FileSystemResource;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

@Service
@Transactional
public class ProductServiceImpl implements ProductService {


    @Autowired
    private ProductRepository productRepository;

public class EmailSenderService {
@Autowired
private  JavaMailSender mailSender;

public void sendEmail(String toEmail[],
		String subject,
		String body) {
	SimpleMailMessage message=new SimpleMailMessage();
	message.setfrom("vishnuchinthala5462@gmail.com");
	message.setTo(toEmail);
	message.setText(body);
	message.setSubject(subject);
	mailSender.send(message);
	System.out.println("Mail send Sucessfully....");
}

public void sendMailWithAttachment(String toEmail[],
		
        String body,
        String subject,
        String attachment) throws MessagingException {
	
      MimeMessage mimeMessage=mailSender.createMimeMessage();
      
      MimeMessageHelper mimeMessageHelper=new MimeMessageHelper(mimeMessage,true);
      
      mimemessagehelper.setfrom("vishnuchinthala5462@gmail.com");
      mimeMessageHelper.setTo(toEmail);
      mimeMessageHelper.setText(body);
      mimeMessageHelper.setSubject(subject);
      
      
     FileSystemResource fileSystemResource=new FileSystemResource(new File(attachment));
    mimeMessageHelper.addAttachment(fileSystemResource.getFilename(),fileSystemResource);
    
    mailSender.send(mimeMessage);
     System.out.println("Mail with attachment sent successfully..");


}
}


    @Override
    public Product createProduct(Product product) {
        return productRepository.save(product);
    }

    @Override
    public Product updateProduct(Product product) {
        Optional < Product > productDb = this.productRepository.findById(product.getId());

        if (productDb.isPresent()) {
            Product productUpdate = productDb.get();
            productUpdate.setId(product.getId());
            productUpdate.setName(product.getName());
            productUpdate.setDescription(product.getDescription());
            productRepository.save(productUpdate);
            return productUpdate;
        } else {
            throw new ResourceNotFoundException("Record not found with id : " + product.getId());
        }
    }

    	
   

    @Override
    public void deleteProduct(long productId) {
        Optional < Product > productDb = this.productRepository.findById(productId);

        if (productDb.isPresent()) {
            this.productRepository.delete(productDb.get());
        } else {
            throw new ResourceNotFoundException("Record not found with id : " + productId);
        }

    }
	
	@Override
	public List<Product> getAllProduct() {
		List< Product> productList =   productRepository.findAll();
		productList.forEach(product -> {
			try {
				product.setPassword(EncryptionDecryptionAES.decrypt(product.getPassword()));
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
		}
		});
		return productList;

	}
}
	

